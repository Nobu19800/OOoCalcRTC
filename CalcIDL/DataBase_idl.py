# Python stubs generated by omniidl from idl/DataBase.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "_GlobalIDL"
#
__name__ = "_GlobalIDL"
_0__GlobalIDL = omniORB.openModule("_GlobalIDL", r"idl/DataBase.idl")
_0__GlobalIDL__POA = omniORB.openModule("_GlobalIDL__POA", r"idl/DataBase.idl")


# struct StringLine
_0__GlobalIDL.StringLine = omniORB.newEmptyClass()
class StringLine (omniORB.StructBase):
    _NP_RepositoryId = "IDL:StringLine:1.0"

    def __init__(self, value):
        self.value = value

_0__GlobalIDL.StringLine = StringLine
_0__GlobalIDL._d_StringLine  = (omniORB.tcInternal.tv_struct, StringLine, StringLine._NP_RepositoryId, "StringLine", "value", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0__GlobalIDL._tc_StringLine = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._d_StringLine)
omniORB.registerType(StringLine._NP_RepositoryId, _0__GlobalIDL._d_StringLine, _0__GlobalIDL._tc_StringLine)
del StringLine

# typedef ... StringList
class StringList:
    _NP_RepositoryId = "IDL:StringList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0__GlobalIDL.StringList = StringList
_0__GlobalIDL._d_StringList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:StringLine:1.0"], 0)
_0__GlobalIDL._ad_StringList = (omniORB.tcInternal.tv_alias, StringList._NP_RepositoryId, "StringList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:StringLine:1.0"], 0))
_0__GlobalIDL._tc_StringList = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._ad_StringList)
omniORB.registerType(StringList._NP_RepositoryId, _0__GlobalIDL._ad_StringList, _0__GlobalIDL._tc_StringList)
del StringList

# struct ValueLine
_0__GlobalIDL.ValueLine = omniORB.newEmptyClass()
class ValueLine (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ValueLine:1.0"

    def __init__(self, value):
        self.value = value

_0__GlobalIDL.ValueLine = ValueLine
_0__GlobalIDL._d_ValueLine  = (omniORB.tcInternal.tv_struct, ValueLine, ValueLine._NP_RepositoryId, "ValueLine", "value", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0))
_0__GlobalIDL._tc_ValueLine = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._d_ValueLine)
omniORB.registerType(ValueLine._NP_RepositoryId, _0__GlobalIDL._d_ValueLine, _0__GlobalIDL._tc_ValueLine)
del ValueLine

# typedef ... ValueList
class ValueList:
    _NP_RepositoryId = "IDL:ValueList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0__GlobalIDL.ValueList = ValueList
_0__GlobalIDL._d_ValueList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ValueLine:1.0"], 0)
_0__GlobalIDL._ad_ValueList = (omniORB.tcInternal.tv_alias, ValueList._NP_RepositoryId, "ValueList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ValueLine:1.0"], 0))
_0__GlobalIDL._tc_ValueList = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._ad_ValueList)
omniORB.registerType(ValueList._NP_RepositoryId, _0__GlobalIDL._ad_ValueList, _0__GlobalIDL._tc_ValueList)
del ValueList

#
# Start of module "DataBase"
#
__name__ = "DataBase"
_0_DataBase = omniORB.openModule("DataBase", r"idl/DataBase.idl")
_0_DataBase__POA = omniORB.openModule("DataBase__POA", r"idl/DataBase.idl")


# interface mDataBase
_0_DataBase._d_mDataBase = (omniORB.tcInternal.tv_objref, "IDL:DataBase/mDataBase:1.0", "mDataBase")
omniORB.typeMapping["IDL:DataBase/mDataBase:1.0"] = _0_DataBase._d_mDataBase
_0_DataBase.mDataBase = omniORB.newEmptyClass()
class mDataBase :
    _NP_RepositoryId = _0_DataBase._d_mDataBase[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_DataBase.mDataBase = mDataBase
_0_DataBase._tc_mDataBase = omniORB.tcInternal.createTypeCode(_0_DataBase._d_mDataBase)
omniORB.registerType(mDataBase._NP_RepositoryId, _0_DataBase._d_mDataBase, _0_DataBase._tc_mDataBase)

# mDataBase operations and attributes
mDataBase._d_get_string = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), ((omniORB.tcInternal.tv_string,0), ), None)
mDataBase._d_set_value = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_float), (), None)
mDataBase._d_get_string_range = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:StringList:1.0"], ), None)
mDataBase._d_set_value_range = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:ValueList:1.0"]), (), None)
mDataBase._d_set_string = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), None)
mDataBase._d_set_string_range = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:StringList:1.0"]), (), None)

# mDataBase object reference
class _objref_mDataBase (CORBA.Object):
    _NP_RepositoryId = mDataBase._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def get_string(self, *args):
        return _omnipy.invoke(self, "get_string", _0_DataBase.mDataBase._d_get_string, args)

    def set_value(self, *args):
        return _omnipy.invoke(self, "set_value", _0_DataBase.mDataBase._d_set_value, args)

    def get_string_range(self, *args):
        return _omnipy.invoke(self, "get_string_range", _0_DataBase.mDataBase._d_get_string_range, args)

    def set_value_range(self, *args):
        return _omnipy.invoke(self, "set_value_range", _0_DataBase.mDataBase._d_set_value_range, args)

    def set_string(self, *args):
        return _omnipy.invoke(self, "set_string", _0_DataBase.mDataBase._d_set_string, args)

    def set_string_range(self, *args):
        return _omnipy.invoke(self, "set_string_range", _0_DataBase.mDataBase._d_set_string_range, args)

    __methods__ = ["get_string", "set_value", "get_string_range", "set_value_range", "set_string", "set_string_range"] + CORBA.Object.__methods__

omniORB.registerObjref(mDataBase._NP_RepositoryId, _objref_mDataBase)
_0_DataBase._objref_mDataBase = _objref_mDataBase
del mDataBase, _objref_mDataBase

# mDataBase skeleton
__name__ = "DataBase__POA"
class mDataBase (PortableServer.Servant):
    _NP_RepositoryId = _0_DataBase.mDataBase._NP_RepositoryId


    _omni_op_d = {"get_string": _0_DataBase.mDataBase._d_get_string, "set_value": _0_DataBase.mDataBase._d_set_value, "get_string_range": _0_DataBase.mDataBase._d_get_string_range, "set_value_range": _0_DataBase.mDataBase._d_set_value_range, "set_string": _0_DataBase.mDataBase._d_set_string, "set_string_range": _0_DataBase.mDataBase._d_set_string_range}

mDataBase._omni_skeleton = mDataBase
_0_DataBase__POA.mDataBase = mDataBase
omniORB.registerSkeleton(mDataBase._NP_RepositoryId, mDataBase)
del mDataBase
__name__ = "DataBase"

#
# End of module "DataBase"
#
__name__ = "_GlobalIDL"


#
# End of module "_GlobalIDL"
#
__name__ = "DataBase_idl"

_exported_modules = ( "DataBase", "_GlobalIDL")

# The end.
